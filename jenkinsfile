pipeline {
    agent any

    environment {
        DOCKER_HUB_USERNAME = "appi12" // Your Docker Hub username
        DOCKER_HUB_REPO = "jeeva" // Repository name
        DOCKER_HUB_API_TOKEN_ID = "dckr_pat_6F-ZBB6fg-opjRBE0pvutevanss" // Jenkins credential ID for Docker Hub API token
        DOCKER_IMAGE = "${DOCKER_HUB_USERNAME}/${DOCKER_HUB_REPO}:${env.BUILD_NUMBER}"
        KUBERNETES_DEPLOYMENT = "my-nodejs-app-deployment"
        KUBERNETES_NAMESPACE = "default"
    }

    stages {
        stage('Create Docker Hub Repository') {
            steps {
                echo 'Ensuring Docker Hub repository exists...'
                script {
                    withCredentials([string(credentialsId: DOCKER_HUB_API_TOKEN_ID, variable: 'DOCKER_HUB_TOKEN')]) {
                        def repoExists = sh(
                            script: """curl -s -o /dev/null -w "%{http_code}" \
                            -u ${DOCKER_HUB_USERNAME}:${DOCKER_HUB_TOKEN} \
                            https://hub.docker.com/v2/repositories/${DOCKER_HUB_USERNAME}/${DOCKER_HUB_REPO}/""",
                            returnStdout: true
                        ).trim()

                        if (repoExists != "200") {
                            echo "Repository does not exist. Creating it now..."
                            sh """
                            curl -s -X POST -H "Content-Type: application/json" \
                            -u ${DOCKER_HUB_USERNAME}:${DOCKER_HUB_TOKEN} \
                            -d '{"name": "${DOCKER_HUB_REPO}", "is_private": false}' \
                            https://hub.docker.com/v2/repositories/${DOCKER_HUB_USERNAME}/
                            """
                            echo "Repository created successfully."
                        } else {
                            echo "Repository already exists."
                        }
                    }
                }
            }
        }

        stage('Checkout Code') {
            steps {
                echo 'Fetching code from GitHub...'
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']], // Replace 'main' with your branch name
                    userRemoteConfigs: [[
                        url: 'https://github.com/jeevan-sysadmin/CICD.git', // Replace with your repo URL
                        credentialsId: 'b38f3c3c-bbdf-4543-86f7-9197ac9117e1' // Replace with your Jenkins GitHub credentials ID
                    ]]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    docker.build(DOCKER_IMAGE)
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        docker.image(DOCKER_IMAGE).push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo 'Deploying to Kubernetes...'
                script {
                    sh """
                    kubectl set image deployment/${KUBERNETES_DEPLOYMENT} \
                    -n ${KUBERNETES_NAMESPACE} app=${DOCKER_IMAGE}
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}
